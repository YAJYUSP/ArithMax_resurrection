/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "sdio.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include "st7565.h"
#include "led.h"
#include "matkeyboard.h"
#include "arithmatic.h"
#include "font.h"
#include "gui.h"
#include "sdcard.h"
#include <string.h>
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
#define BLOCK_START_ADDR         0     /* Block start address      */
#define NUM_OF_BLOCKS            1   /* Total number of blocks   */
#define BUFFER_WORDS_SIZE        ((BLOCKSIZE * NUM_OF_BLOCKS) >> 2) /* Total data size in bytes */


uint8_t Buffer_Tx[512],Buffer_Rx[512] = {0};
uint32_t i;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_TIM2_Init();
  MX_TIM11_Init();
  MX_TIM10_Init();
  //MX_SDIO_SD_Init();
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim10);
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
	
	CH452Init();
	LCD_Init();
	arithInit();
	dispstr_malloc();

	//SD_RW_Test();
	HAL_Delay(1000);
//	//SD_FF_RW_Test();
//	extern SD_HandleTypeDef hsd;
//		
//	printf("Micro SD Card Test...\r\n");
//	HAL_SD_InitCard(&hsd);
//  /* 检测SD卡是否正常（处于数据传输模式的传输状态） */
//  if(HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
//  {      
//    printf("Initialize SD card successfully!\r\n");
//    // 打印SD卡基本信息
//    printf(" SD card information! \r\n");
//    printf(" CardCapacity  : %llu \r\n", (unsigned long long)hsd.SdCard.BlockSize * hsd.SdCard.BlockNbr);// 显示容量
//    printf(" CardBlockSize : %d \r\n", hsd.SdCard.BlockSize);   // 块大小
//    printf(" LogBlockNbr   : %d \r\n", hsd.SdCard.LogBlockNbr);	// 逻辑块数量
//		printf(" LogBlockSize  : %d \r\n", hsd.SdCard.LogBlockSize);// 逻辑块大小
//    printf(" RCA           : %d \r\n", hsd.SdCard.RelCardAdd);  // 卡相对地址
//    printf(" CardType      : %d \r\n", hsd.SdCard.CardType);    // 卡类型
//    // 读取并打印SD卡的CID信息
//    HAL_SD_CardCIDTypeDef sdcard_cid;
//    HAL_SD_GetCardCID(&hsd,&sdcard_cid);
//    printf(" ManufacturerID: %d \r\n",sdcard_cid.ManufacturerID);
//  }
//  else
//  {
//    printf("SD card init fail!\r\n" );
//  }
// 
//  /* 擦除SD卡块 */
//  printf("------------------- Block Erase -------------------------------\r\n");
//  if(HAL_SD_Erase(&hsd, BLOCK_START_ADDR, NUM_OF_BLOCKS) == HAL_OK)
//  {
//    /* Wait until SD cards are ready to use for new operation */
//    while(HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
//    {
//    }
//    printf("\r\nErase Block Success!\r\n");
//  }
//  else
//  {
//      printf("\r\nErase Block Failed!\r\n");					
//  }
//	HAL_Delay(100);
//  /* 填充缓冲区数据 */
//  memset(Buffer_Tx, 0x15, sizeof(Buffer_Tx));
//  /* 向SD卡块写入数据 */
//  printf("------------------- Write SD card block data Test ------------------\r\n");
//  if(HAL_SD_WriteBlocks(&hsd, Buffer_Tx, BLOCK_START_ADDR, NUM_OF_BLOCKS, 10) == HAL_OK)
//  {
//    while(HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
//    {
//    }
//    printf("\r\nWrite Block Success!\r\n");
//    for(i = 0; i < sizeof(Buffer_Tx); i++)
//    {
//      printf("0x%02x:%02x ", i, Buffer_Tx[i]);
//    }
//    printf("\r\n");
//  }
//  else
//  {
//    printf("\r\nWrite Block Failed!\r\n");
//  }
//  /* 读取操作之后的数据 */
//  printf("------------------- Read SD card block data after Write ------------------\r\n");
//  if(HAL_SD_ReadBlocks(&hsd, Buffer_Rx, BLOCK_START_ADDR, NUM_OF_BLOCKS, 10) == HAL_OK)
//  {
//    while(HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
//    {
//    }
//    printf("\r\nRead Block Success!\r\n");
//    for(i = 0; i < sizeof(Buffer_Rx); i++)
//    {
//      printf("0x%02x:%02x ", i, Buffer_Rx[i]);
//    }
//    printf("\r\n");
//  }
//  else
//  {
//    printf("\r\nRead Block Failed!\r\n");				
//  }


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(Key_updateFlag)
		{
				Line0Key2mani(KeyVal,(uint8_t *)&Key_updateFlag);
				
		}
		printf("114514/r/n");
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
